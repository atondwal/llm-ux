// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ListConversationsV1ConversationsGetData, ListConversationsV1ConversationsGetResponses, CreateConversationV1ConversationsPostData, CreateConversationV1ConversationsPostResponses, CreateConversationV1ConversationsPostErrors, GetConversationV1ConversationsConversationIdGetData, GetConversationV1ConversationsConversationIdGetResponses, GetConversationV1ConversationsConversationIdGetErrors, AddMessageV1ConversationsConversationIdMessagesPostData, AddMessageV1ConversationsConversationIdMessagesPostResponses, AddMessageV1ConversationsConversationIdMessagesPostErrors, CreateChatCompletionV1ChatCompletionsPostData, CreateChatCompletionV1ChatCompletionsPostResponses, CreateChatCompletionV1ChatCompletionsPostErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Conversations
 * List all conversations.
 */
export const listConversationsV1ConversationsGet = <ThrowOnError extends boolean = false>(options?: Options<ListConversationsV1ConversationsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListConversationsV1ConversationsGetResponses, unknown, ThrowOnError>({
        url: '/v1/conversations',
        ...options
    });
};

/**
 * Create Conversation
 * Create a new conversation.
 */
export const createConversationV1ConversationsPost = <ThrowOnError extends boolean = false>(options: Options<CreateConversationV1ConversationsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateConversationV1ConversationsPostResponses, CreateConversationV1ConversationsPostErrors, ThrowOnError>({
        url: '/v1/conversations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Conversation
 * Get a conversation by ID.
 */
export const getConversationV1ConversationsConversationIdGet = <ThrowOnError extends boolean = false>(options: Options<GetConversationV1ConversationsConversationIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetConversationV1ConversationsConversationIdGetResponses, GetConversationV1ConversationsConversationIdGetErrors, ThrowOnError>({
        url: '/v1/conversations/{conversation_id}',
        ...options
    });
};

/**
 * Add Message
 * Add a message to a conversation.
 */
export const addMessageV1ConversationsConversationIdMessagesPost = <ThrowOnError extends boolean = false>(options: Options<AddMessageV1ConversationsConversationIdMessagesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddMessageV1ConversationsConversationIdMessagesPostResponses, AddMessageV1ConversationsConversationIdMessagesPostErrors, ThrowOnError>({
        url: '/v1/conversations/{conversation_id}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Chat Completion
 * OpenAI-compatible chat completion endpoint.
 */
export const createChatCompletionV1ChatCompletionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateChatCompletionV1ChatCompletionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateChatCompletionV1ChatCompletionsPostResponses, CreateChatCompletionV1ChatCompletionsPostErrors, ThrowOnError>({
        url: '/v1/chat/completions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};