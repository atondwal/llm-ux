// This file is auto-generated by @hey-api/openapi-ts

/**
 * ChatCompletionRequest
 * OpenAI-compatible chat completion request.
 */
export type ChatCompletionRequest = {
    /**
     * Messages
     */
    messages: Array<ChatMessage>;
    /**
     * Model
     */
    model: string;
    /**
     * Conversation Id
     */
    conversation_id?: string | null;
    /**
     * Stream
     */
    stream?: boolean;
    /**
     * Temperature
     */
    temperature?: number;
    /**
     * Max Tokens
     */
    max_tokens?: number | null;
};

/**
 * ChatCompletionResponse
 * OpenAI-compatible chat completion response.
 */
export type ChatCompletionResponse = {
    /**
     * Id
     */
    id: string;
    /**
     * Object
     */
    object: 'chat.completion';
    /**
     * Created
     */
    created: number;
    /**
     * Model
     */
    model: string;
    /**
     * Choices
     */
    choices: Array<Choice>;
    /**
     * Usage
     */
    usage?: {
        [key: string]: number;
    } | null;
};

/**
 * ChatMessage
 * OpenAI-compatible chat message.
 */
export type ChatMessage = {
    /**
     * Role
     */
    role: 'system' | 'user' | 'assistant';
    /**
     * Content
     */
    content: string;
};

/**
 * Choice
 * OpenAI-compatible response choice.
 */
export type Choice = {
    /**
     * Index
     */
    index: number;
    message: ChatMessage;
    /**
     * Finish Reason
     */
    finish_reason: 'stop' | 'length' | 'content_filter' | 'function_call';
};

/**
 * Conversation
 * The core conversation model - everything is a conversation.
 */
export type Conversation = {
    /**
     * Id
     */
    id?: string;
    /**
     * Type
     */
    type: 'chat' | 'wiki_tag';
    /**
     * Title
     */
    title: string;
    /**
     * Participants
     */
    participants?: Array<Participant>;
    /**
     * Messages
     */
    messages?: Array<Message>;
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * Message
 * A message in a conversation.
 */
export type Message = {
    /**
     * Id
     */
    id?: string;
    /**
     * Conversation Id
     */
    conversation_id: string;
    /**
     * Author Id
     */
    author_id: string;
    /**
     * Content
     */
    content: string;
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Edited At
     */
    edited_at?: string | null;
};

/**
 * Participant
 * A conversation participant - can be human or AI.
 */
export type Participant = {
    /**
     * Id
     */
    id?: string;
    /**
     * Type
     */
    type: 'human' | 'ai';
    /**
     * Name
     */
    name: string;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type ListConversationsV1ConversationsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/conversations';
};

export type ListConversationsV1ConversationsGetResponses = {
    /**
     * Response List Conversations V1 Conversations Get
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type ListConversationsV1ConversationsGetResponse = ListConversationsV1ConversationsGetResponses[keyof ListConversationsV1ConversationsGetResponses];

export type CreateConversationV1ConversationsPostData = {
    body: Conversation;
    path?: never;
    query?: never;
    url: '/v1/conversations';
};

export type CreateConversationV1ConversationsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateConversationV1ConversationsPostError = CreateConversationV1ConversationsPostErrors[keyof CreateConversationV1ConversationsPostErrors];

export type CreateConversationV1ConversationsPostResponses = {
    /**
     * Successful Response
     */
    201: Conversation;
};

export type CreateConversationV1ConversationsPostResponse = CreateConversationV1ConversationsPostResponses[keyof CreateConversationV1ConversationsPostResponses];

export type GetConversationV1ConversationsConversationIdGetData = {
    body?: never;
    path: {
        /**
         * Conversation Id
         */
        conversation_id: string;
    };
    query?: never;
    url: '/v1/conversations/{conversation_id}';
};

export type GetConversationV1ConversationsConversationIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetConversationV1ConversationsConversationIdGetError = GetConversationV1ConversationsConversationIdGetErrors[keyof GetConversationV1ConversationsConversationIdGetErrors];

export type GetConversationV1ConversationsConversationIdGetResponses = {
    /**
     * Successful Response
     */
    200: Conversation;
};

export type GetConversationV1ConversationsConversationIdGetResponse = GetConversationV1ConversationsConversationIdGetResponses[keyof GetConversationV1ConversationsConversationIdGetResponses];

export type AddMessageV1ConversationsConversationIdMessagesPostData = {
    /**
     * Message Data
     */
    body: {
        [key: string]: unknown;
    };
    path: {
        /**
         * Conversation Id
         */
        conversation_id: string;
    };
    query?: never;
    url: '/v1/conversations/{conversation_id}/messages';
};

export type AddMessageV1ConversationsConversationIdMessagesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddMessageV1ConversationsConversationIdMessagesPostError = AddMessageV1ConversationsConversationIdMessagesPostErrors[keyof AddMessageV1ConversationsConversationIdMessagesPostErrors];

export type AddMessageV1ConversationsConversationIdMessagesPostResponses = {
    /**
     * Successful Response
     */
    201: Message;
};

export type AddMessageV1ConversationsConversationIdMessagesPostResponse = AddMessageV1ConversationsConversationIdMessagesPostResponses[keyof AddMessageV1ConversationsConversationIdMessagesPostResponses];

export type CreateChatCompletionV1ChatCompletionsPostData = {
    body: ChatCompletionRequest;
    path?: never;
    query?: never;
    url: '/v1/chat/completions';
};

export type CreateChatCompletionV1ChatCompletionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateChatCompletionV1ChatCompletionsPostError = CreateChatCompletionV1ChatCompletionsPostErrors[keyof CreateChatCompletionV1ChatCompletionsPostErrors];

export type CreateChatCompletionV1ChatCompletionsPostResponses = {
    /**
     * Successful Response
     */
    200: ChatCompletionResponse;
};

export type CreateChatCompletionV1ChatCompletionsPostResponse = CreateChatCompletionV1ChatCompletionsPostResponses[keyof CreateChatCompletionV1ChatCompletionsPostResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};